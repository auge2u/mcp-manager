{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent } from 'electron'\nimport * as path from 'node:path'\nimport * as fs from 'node:fs/promises'\nimport { existsSync, readFileSync } from 'node:fs'\nimport * as os from 'node:os'\nimport { exec } from 'node:child_process'\nimport { promisify } from 'node:util'\n\nlet mainWindow: BrowserWindow | null = null\n\nasync function createWindow() {\n    if (mainWindow) return\n    \n    mainWindow = new BrowserWindow({\n        width: 1200,\n        height: 800,\n        webPreferences: {\n            nodeIntegration: true,\n            contextIsolation: false,\n            sandbox: false,\n            preload: path.join(__dirname, 'preload.js'),\n            webSecurity: true,\n            devTools: true\n        },\n        show: false,\n        backgroundColor: '#f2f1e9'\n    })\n\n    // Set Content Security Policy\n    mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {\n        callback({\n            responseHeaders: {\n                ...details.responseHeaders,\n                'Content-Security-Policy': [\n                    \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\",\n                    \"script-src * 'unsafe-inline' 'unsafe-eval';\",\n                    \"connect-src * 'unsafe-inline';\",\n                    \"img-src * data: blob: 'unsafe-inline';\",\n                    \"frame-src *;\",\n                    \"style-src * 'unsafe-inline';\"\n                ].join(' ')\n            }\n        })\n    })\n\n    // Enable remote debugging in development\n    if (process.env.VITE_DEV_SERVER_URL) {\n        mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {\n            console.error('Failed to load:', errorCode, errorDescription);\n            setTimeout(() => {\n                mainWindow?.loadURL(process.env.VITE_DEV_SERVER_URL || '');\n            }, 1000);\n        });\n    }\n\n    mainWindow.once('ready-to-show', () => {\n        mainWindow?.show()\n    })\n\n    const configPath = path.join(os.homedir(), 'Library', 'Application Support', 'Claude', 'claude_desktop_config.json')\n    console.log('Config path:', configPath)\n    try {\n        const configExists = existsSync(configPath)\n        console.log('Config exists:', configExists)\n        if (configExists) {\n            const config = readFileSync(configPath, 'utf8')\n            console.log('Config content:', config)\n        }\n    } catch (error) {\n        console.error('Error checking config:', error)\n    }\n\n    try {\n        if (process.env.VITE_DEV_SERVER_URL) {\n            console.log('Loading dev server URL:', process.env.VITE_DEV_SERVER_URL)\n            await mainWindow.loadURL(process.env.VITE_DEV_SERVER_URL)\n            \n            // Open dev tools in development\n            mainWindow.webContents.openDevTools()\n            \n            // Add error handling for development\n            mainWindow.webContents.on('did-fail-load', (_, errorCode, errorDescription) => {\n                console.error(`Page load failed: ${errorCode} - ${errorDescription}`)\n                if (mainWindow) {\n                    showErrorPage(mainWindow, `Failed to load development server: ${errorDescription}`)\n                }\n            })\n        } else {\n            console.log('Loading production build')\n            await mainWindow.loadFile('dist/index.html')\n        }\n    } catch (error) {\n        console.error('Error loading window content:', error)\n        if (mainWindow) {\n            showErrorPage(mainWindow, error instanceof Error ? error.message : String(error))\n        }\n    }\n\n    // Register IPC handlers for MCP process management\n    ipcMain.handle('launch-mcp', async (_event: IpcMainInvokeEvent, config: {\n        command: string;\n        args?: string[];\n        env?: Record<string, string>;\n        projectId?: string;\n    }) => {\n        try {\n            const { command, args = [], env = {}, projectId } = config\n            \n            // Add project isolation through environment variables\n            const processEnv = {\n                ...process.env,\n                ...env,\n                MCP_PROJECT_ID: projectId || 'default',\n                MCP_WORKSPACE_PATH: app.getPath('userData')\n            }\n            \n            const mcpProcess = exec(`${command} ${args.join(' ')}`, {\n                env: processEnv,\n            })\n            \n            mcpProcess.stdout?.on('data', (data) => {\n                console.log(`MCP output: ${data}`)\n                mainWindow?.webContents.send('mcp-output', data)\n            })\n            \n            mcpProcess.stderr?.on('data', (data) => {\n                console.error(`MCP error: ${data}`)\n                mainWindow?.webContents.send('mcp-error', data)\n            })\n            \n            return { success: true }\n        } catch (error) {\n            console.error('Failed to launch MCP:', error)\n            throw error\n        }\n    })\n\n    mainWindow.on('closed', () => {\n        mainWindow = null\n    })\n}\n\napp.whenReady().then(createWindow)\n\napp.on('activate', () => {\n    if (!mainWindow) {\n        createWindow()\n    }\n})\n\napp.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') {\n        app.quit()\n    }\n})\n\n// Helper function to show error page\nfunction showErrorPage(window: BrowserWindow, errorMessage: string) {\n    const errorHtml = `\n        <html>\n            <head>\n                <style>\n                    body {\n                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n                        padding: 2rem;\n                        background: #f5f5f5;\n                    }\n                    .error-container {\n                        max-width: 600px;\n                        margin: 0 auto;\n                        background: white;\n                        padding: 2rem;\n                        border-radius: 8px;\n                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                    }\n                    h1 { color: #e53e3e; margin-top: 0; }\n                    pre { \n                        background: #f7fafc;\n                        padding: 1rem;\n                        border-radius: 4px;\n                        overflow-x: auto;\n                    }\n                </style>\n            </head>\n            <body>\n                <div class=\"error-container\">\n                    <h1>Error Loading Content</h1>\n                    <p>An error occurred while loading the application:</p>\n                    <pre>${errorMessage}</pre>\n                    <p>Please check the console for more details.</p>\n                </div>\n            </body>\n        </html>\n    `\n    window.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(errorHtml)}`)\n}\n\nipcMain.handle('read-config', async () => {\n    try {\n        const configPath = path.join(os.homedir(), 'Library', 'Application Support', 'Claude', 'claude_desktop_config.json')\n        console.log('Reading config from:', configPath)\n        \n        const exists = existsSync(configPath)\n        console.log('Config file exists:', exists)\n        \n        const data = await fs.readFile(configPath, 'utf8')\n        console.log('Config data:', data)\n        \n        const parsedData = JSON.parse(data)\n        console.log('Parsed config:', parsedData)\n        \n        return parsedData\n    } catch (error) {\n        console.error('Error reading config:', error)\n        throw error\n    }\n})\n\nipcMain.handle('execute-command', async (_event: IpcMainInvokeEvent, command: string) => {\n    const execAsync = promisify(exec)\n    try {\n        const { stdout, stderr } = await execAsync(command)\n        console.log('Command output:', stdout)\n        if (stderr) console.error('Command stderr:', stderr)\n        return { success: true, output: stdout }\n    } catch (error) {\n        console.error('Command error:', error)\n        throw error\n    }\n})\n"],"names":["BrowserWindow","path","os","existsSync","readFileSync","ipcMain","app","exec","fs","promisify"],"mappings":"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"}